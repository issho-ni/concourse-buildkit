#!/usr/bin/env sh

set -eu

function sanitize_cgroups() {
  mkdir -p /sys/fs/cgroup
  mountpoint -q /sys/fs/cgroup || \
    mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup

  mount -o remount,rw none /sys/fs/cgroup

  sed -e 1d /proc/cgroups | while read sys hierarchy num enabled; do
    if [ "$enabled" != "1" ]; then
      # subsystem disabled; skip
      continue
    fi

    grouping="$(cat /proc/self/cgroup | cut -d: -f2 | grep "\\<$sys\\>")" || true
    if [ -z "$grouping" ]; then
      # subsystem not mounted anywhere; mount it on its own
      grouping="$sys"
    fi

    mountpoint="/sys/fs/cgroup/$grouping"

    mkdir -p "$mountpoint"

    # clear out existing mount to make sure new one is read-write
    if mountpoint -q "$mountpoint"; then
      umount "$mountpoint"
    fi

    mount -n -t cgroup -o "$grouping" cgroup "$mountpoint"

    if [ "$grouping" != "$sys" ]; then
      if [ -L "/sys/fs/cgroup/$sys" ]; then
        rm "/sys/fs/cgroup/$sys"
      fi

      ln -s "$mountpoint" "/sys/fs/cgroup/$sys"
    fi
  done

  if ! test -e /sys/fs/cgroup/systemd ; then
    mkdir /sys/fs/cgroup/systemd
    mount -t cgroup -o none,name=systemd none /sys/fs/cgroup/systemd
  fi
}

sanitize_cgroups

BUILD_ARGS_OPT=$(env | awk '/BUILD_ARG_/ {gsub(/BUILD_ARG_/, "--build-arg "); printf "%s ", $0}')
BUILD_ARGS_FILE=${BUILD_ARGS_FILE:-}
BUILDCTL_OPTS=${BUILDCTL_OPTS:-}
CACHE_IMPORT_REF=${CACHE_IMPORT_REF:-}
CACHE_IMPORT_SRC=${CACHE_IMPORT_SRC:-cache}
CACHE_IMPORT_TYPE=${CACHE_IMPORT_TYPE:-local}
CACHE_EXPORT_DEST=${CACHE_EXPORT_DEST:-$CACHE_IMPORT_SRC}
CACHE_EXPORT_MODE=${CACHE_EXPORT_MODE:-min}
CACHE_EXPORT_REF=${CACHE_EXPORT_REF:-$CACHE_IMPORT_REF}
CACHE_EXPORT_TYPE=${CACHE_EXPORT_TYPE:-$CACHE_IMPORT_TYPE}
CONTEXT=${CONTEXT:-.}
DOCKERFILE=${DOCKERFILE:-$CONTEXT}
OUTPUT_TYPE=${OUTPUT_TYPE:-docker}
REPOSITORY=${REPOSITORY:-}
TAG=${TAG:-latest}
TAG_FILE=${TAG_FILE:-}
TARGET=${TARGET:-}
TARGET_FILE=${TARGET_FILE:-}

BUILDCTL_OPTS="${BUILDCTL_OPTS} --frontend dockerfile.v0"
BUILDCTL_OPTS="${BUILDCTL_OPTS} --local context=${CONTEXT}"
BUILDCTL_OPTS="${BUILDCTL_OPTS} --local dockerfile=${DOCKERFILE}"

if [ "${CACHE_IMPORT_TYPE}" = "local" ]; then
    if [ -n "${CACHE_IMPORT_SRC}" ] && [ -f "${CACHE_IMPORT_SRC}/index.json" ]; then
        BUILDCTL_OPTS="${BUILDCTL_OPTS} --import-cache type=local,src=${CACHE_IMPORT_SRC}"
    fi
elif [ "$CACHE_IMPORT_TYPE" = "registry" ]; then
    if [ -n "$CACHE_IMPORT_REF" ]; then
        BUILDCTL_OPTS="${BUILDCTL_OPTS} --import-cache type=registry,ref=${CACHE_IMPORT_REF}"
    else
        echo "invalid \$CACHE_IMPORT_REF '${CACHE_IMPORT_REF}'!"
        exit 1
    fi
elif [ "$CACHE_IMPORT_TYPE" != "none" ]; then
    echo "invalid \$CACHE_IMPORT_TYPE '${CACHE_IMPORT_TYPE}'!"
    exit 1
fi

if [ ${CACHE_EXPORT_TYPE} = "local" ]; then
    if [ -n ${CACHE_EXPORT_DEST} ] && [ -d ${CACHE_EXPORT_DEST} ]; then
        BUILDCTL_OPTS="${BUILDCTL_OPTS} --export-cache type=local,mode=${CACHE_EXPORT_MODE},dest=${CACHE_EXPORT_DEST}"
    else
        echo "invalid \$CACHE_EXPORT_DEST '${CACHE_EXPORT_DEST}'!"
        exit 1
    fi
elif [ "${CACHE_EXPORT_TYPE}" = "registry" ]; then
    if [ -n "$CACHE_EXPORT_REF" ]; then
        BUILDCTL_OPTS="${BUILDCTL_OPTS} --export-cache type=registry,mode=${CACHE_EXPORT_MODE},ref=${CACHE_EXPORT_REF}"
    else
        echo "invalid \$CACHE_EXPORT_REF '${CACHE_EXPORT_REF}'!"
        exit 1
    fi
elif [ "${CACHE_EXPORT_TYPE}" != "none" ]; then
    echo "invalid \$CACHE_EXPORT_TYPE '${CACHE_EXPORT_TYPE}'!"
    exit 1
fi

if [ -n "$TARGET_FILE" ]; then
    if [ ! -f "$TARGET_FILE" ]; then
        echo "target file '$TARGET_FILE' does not exist!"
        exit 1
    fi

    TARGET=$(cat $TARGET_FILE)
fi

if [ -n "$TARGET" ]; then
    BUILDCTL_OPTS="${BUILDCTL_OPTS} --opt target=${TARGET}"
fi

if [ -n "$BUILD_ARGS_FILE" ]; then
    if [ ! -f "$BUILD_ARGS_FILE" ]; then
        echo "build args file '$BUILD_ARGS_FILE' does not exist!"
        exit 1
    fi

    while read -r line; do
        if [ -n "$line" ]; then
            $BUILD_ARGS_OPT="${BUILD_ARGS_OPT} --build-arg ${line}"
        fi
    done < $BUILD_ARGS_FILE
fi

BUILDCTL_OPTS="${BUILDCTL_OPTS} ${BUILD_ARGS_OPT}"

if [ "$OUTPUT_TYPE" != "none" ] && [ -d image ]; then
    if [ ! -n "$REPOSITORY" ]; then
        echo "required parameter \$REPOSITORY is missing!"
        exit 1
    fi

    if [ -n "$TAG_FILE" ]; then
        if [ ! -f "$TAG_FILE" ]; then
            echo "tag file '$TAG_FILE' does not exist!"
            exit 1
        fi

        TAG=$(cat $TAG_FILE)
    fi

    if [ -n "$TAG" ]; then
        REPOSITORY="${REPOSITORY}:${TAG}"
    fi

    BUILDCTL_OPTS="${BUILDCTL_OPTS} --output type=${OUTPUT_TYPE},name=${REPOSITORY},dest=image/image.tar"
fi

exec buildctl-daemonless.sh build ${BUILDCTL_OPTS}
